<?php

/**
 * Base class that represents a row from the 'users' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * Fri Sep 18 18:45:53 2009
 *
 * @package    lib.model.om
 */
abstract class BaseUsers extends BaseObject  implements Persistent {


  const PEER = 'UsersPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        UsersPeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * The value for the login field.
	 * @var        string
	 */
	protected $login;

	/**
	 * The value for the password field.
	 * @var        string
	 */
	protected $password;

	/**
	 * The value for the email field.
	 * @var        string
	 */
	protected $email;

	/**
	 * The value for the website_blog field.
	 * @var        string
	 */
	protected $website_blog;

	/**
	 * The value for the avatar field.
	 * @var        string
	 */
	protected $avatar;

	/**
	 * The value for the about field.
	 * @var        string
	 */
	protected $about;

	/**
	 * The value for the right_id field.
	 * Note: this column has a database default value of: 1
	 * @var        int
	 */
	protected $right_id;

	/**
	 * The value for the last_login field.
	 * @var        string
	 */
	protected $last_login;

	/**
	 * The value for the is_active field.
	 * Note: this column has a database default value of: true
	 * @var        boolean
	 */
	protected $is_active;

	/**
	 * The value for the is_super_admin field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $is_super_admin;

	/**
	 * The value for the created_at field.
	 * @var        string
	 */
	protected $created_at;

	/**
	 * The value for the updated_at field.
	 * @var        string
	 */
	protected $updated_at;

	/**
	 * @var        array UsersRememberKey[] Collection to store aggregation of UsersRememberKey objects.
	 */
	protected $collUsersRememberKeys;

	/**
	 * @var        Criteria The criteria used to select the current contents of collUsersRememberKeys.
	 */
	private $lastUsersRememberKeyCriteria = null;

	/**
	 * @var        array Film[] Collection to store aggregation of Film objects.
	 */
	protected $collFilms;

	/**
	 * @var        Criteria The criteria used to select the current contents of collFilms.
	 */
	private $lastFilmCriteria = null;

	/**
	 * @var        array FilmRaiting[] Collection to store aggregation of FilmRaiting objects.
	 */
	protected $collFilmRaitings;

	/**
	 * @var        Criteria The criteria used to select the current contents of collFilmRaitings.
	 */
	private $lastFilmRaitingCriteria = null;

	/**
	 * @var        array Comments[] Collection to store aggregation of Comments objects.
	 */
	protected $collCommentss;

	/**
	 * @var        Criteria The criteria used to select the current contents of collCommentss.
	 */
	private $lastCommentsCriteria = null;

	/**
	 * @var        array Messages[] Collection to store aggregation of Messages objects.
	 */
	protected $collMessagess;

	/**
	 * @var        Criteria The criteria used to select the current contents of collMessagess.
	 */
	private $lastMessagesCriteria = null;

	/**
	 * @var        UserFriends one-to-one related UserFriends object
	 */
	protected $singleUserFriendsRelatedByUserId;

	/**
	 * @var        array UserFriends[] Collection to store aggregation of UserFriends objects.
	 */
	protected $collUserFriendssRelatedByFriendId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collUserFriendssRelatedByFriendId.
	 */
	private $lastUserFriendsRelatedByFriendIdCriteria = null;

	/**
	 * @var        array News[] Collection to store aggregation of News objects.
	 */
	protected $collNewss;

	/**
	 * @var        Criteria The criteria used to select the current contents of collNewss.
	 */
	private $lastNewsCriteria = null;

	/**
	 * @var        array Afisha[] Collection to store aggregation of Afisha objects.
	 */
	protected $collAfishas;

	/**
	 * @var        Criteria The criteria used to select the current contents of collAfishas.
	 */
	private $lastAfishaCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Initializes internal state of BaseUsers object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->right_id = 1;
		$this->is_active = true;
		$this->is_super_admin = false;
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [login] column value.
	 * 
	 * @return     string
	 */
	public function getLogin()
	{
		return $this->login;
	}

	/**
	 * Get the [password] column value.
	 * 
	 * @return     string
	 */
	public function getPassword()
	{
		return $this->password;
	}

	/**
	 * Get the [email] column value.
	 * 
	 * @return     string
	 */
	public function getEmail()
	{
		return $this->email;
	}

	/**
	 * Get the [website_blog] column value.
	 * 
	 * @return     string
	 */
	public function getWebsiteBlog()
	{
		return $this->website_blog;
	}

	/**
	 * Get the [avatar] column value.
	 * 
	 * @return     string
	 */
	public function getAvatar()
	{
		return $this->avatar;
	}

	/**
	 * Get the [about] column value.
	 * 
	 * @return     string
	 */
	public function getAbout()
	{
		return $this->about;
	}

	/**
	 * Get the [right_id] column value.
	 * 
	 * @return     int
	 */
	public function getRightId()
	{
		return $this->right_id;
	}

	/**
	 * Get the [optionally formatted] temporal [last_login] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getLastLogin($format = 'Y-m-d H:i:s')
	{
		if ($this->last_login === null) {
			return null;
		}


		if ($this->last_login === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->last_login);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->last_login, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [is_active] column value.
	 * 
	 * @return     boolean
	 */
	public function getIsActive()
	{
		return $this->is_active;
	}

	/**
	 * Get the [is_super_admin] column value.
	 * 
	 * @return     boolean
	 */
	public function getIsSuperAdmin()
	{
		return $this->is_super_admin;
	}

	/**
	 * Get the [optionally formatted] temporal [created_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getCreatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->created_at === null) {
			return null;
		}


		if ($this->created_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->created_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->created_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [updated_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getUpdatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->updated_at === null) {
			return null;
		}


		if ($this->updated_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->updated_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->updated_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     Users The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = UsersPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [login] column.
	 * 
	 * @param      string $v new value
	 * @return     Users The current object (for fluent API support)
	 */
	public function setLogin($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->login !== $v) {
			$this->login = $v;
			$this->modifiedColumns[] = UsersPeer::LOGIN;
		}

		return $this;
	} // setLogin()

	/**
	 * Set the value of [password] column.
	 * 
	 * @param      string $v new value
	 * @return     Users The current object (for fluent API support)
	 */
	public function setPassword($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->password !== $v) {
			$this->password = $v;
			$this->modifiedColumns[] = UsersPeer::PASSWORD;
		}

		return $this;
	} // setPassword()

	/**
	 * Set the value of [email] column.
	 * 
	 * @param      string $v new value
	 * @return     Users The current object (for fluent API support)
	 */
	public function setEmail($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->email !== $v) {
			$this->email = $v;
			$this->modifiedColumns[] = UsersPeer::EMAIL;
		}

		return $this;
	} // setEmail()

	/**
	 * Set the value of [website_blog] column.
	 * 
	 * @param      string $v new value
	 * @return     Users The current object (for fluent API support)
	 */
	public function setWebsiteBlog($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->website_blog !== $v) {
			$this->website_blog = $v;
			$this->modifiedColumns[] = UsersPeer::WEBSITE_BLOG;
		}

		return $this;
	} // setWebsiteBlog()

	/**
	 * Set the value of [avatar] column.
	 * 
	 * @param      string $v new value
	 * @return     Users The current object (for fluent API support)
	 */
	public function setAvatar($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->avatar !== $v) {
			$this->avatar = $v;
			$this->modifiedColumns[] = UsersPeer::AVATAR;
		}

		return $this;
	} // setAvatar()

	/**
	 * Set the value of [about] column.
	 * 
	 * @param      string $v new value
	 * @return     Users The current object (for fluent API support)
	 */
	public function setAbout($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->about !== $v) {
			$this->about = $v;
			$this->modifiedColumns[] = UsersPeer::ABOUT;
		}

		return $this;
	} // setAbout()

	/**
	 * Set the value of [right_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Users The current object (for fluent API support)
	 */
	public function setRightId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->right_id !== $v || $v === 1) {
			$this->right_id = $v;
			$this->modifiedColumns[] = UsersPeer::RIGHT_ID;
		}

		return $this;
	} // setRightId()

	/**
	 * Sets the value of [last_login] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Users The current object (for fluent API support)
	 */
	public function setLastLogin($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->last_login !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->last_login !== null && $tmpDt = new DateTime($this->last_login)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->last_login = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = UsersPeer::LAST_LOGIN;
			}
		} // if either are not null

		return $this;
	} // setLastLogin()

	/**
	 * Set the value of [is_active] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Users The current object (for fluent API support)
	 */
	public function setIsActive($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->is_active !== $v || $v === true) {
			$this->is_active = $v;
			$this->modifiedColumns[] = UsersPeer::IS_ACTIVE;
		}

		return $this;
	} // setIsActive()

	/**
	 * Set the value of [is_super_admin] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Users The current object (for fluent API support)
	 */
	public function setIsSuperAdmin($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->is_super_admin !== $v || $v === false) {
			$this->is_super_admin = $v;
			$this->modifiedColumns[] = UsersPeer::IS_SUPER_ADMIN;
		}

		return $this;
	} // setIsSuperAdmin()

	/**
	 * Sets the value of [created_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Users The current object (for fluent API support)
	 */
	public function setCreatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->created_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->created_at !== null && $tmpDt = new DateTime($this->created_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->created_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = UsersPeer::CREATED_AT;
			}
		} // if either are not null

		return $this;
	} // setCreatedAt()

	/**
	 * Sets the value of [updated_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Users The current object (for fluent API support)
	 */
	public function setUpdatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->updated_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->updated_at !== null && $tmpDt = new DateTime($this->updated_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->updated_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = UsersPeer::UPDATED_AT;
			}
		} // if either are not null

		return $this;
	} // setUpdatedAt()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			// First, ensure that we don't have any columns that have been modified which aren't default columns.
			if (array_diff($this->modifiedColumns, array(UsersPeer::RIGHT_ID,UsersPeer::IS_ACTIVE,UsersPeer::IS_SUPER_ADMIN))) {
				return false;
			}

			if ($this->right_id !== 1) {
				return false;
			}

			if ($this->is_active !== true) {
				return false;
			}

			if ($this->is_super_admin !== false) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->login = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->password = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->email = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->website_blog = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->avatar = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->about = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->right_id = ($row[$startcol + 7] !== null) ? (int) $row[$startcol + 7] : null;
			$this->last_login = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->is_active = ($row[$startcol + 9] !== null) ? (boolean) $row[$startcol + 9] : null;
			$this->is_super_admin = ($row[$startcol + 10] !== null) ? (boolean) $row[$startcol + 10] : null;
			$this->created_at = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->updated_at = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 13; // 13 = UsersPeer::NUM_COLUMNS - UsersPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Users object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(UsersPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = UsersPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->collUsersRememberKeys = null;
			$this->lastUsersRememberKeyCriteria = null;

			$this->collFilms = null;
			$this->lastFilmCriteria = null;

			$this->collFilmRaitings = null;
			$this->lastFilmRaitingCriteria = null;

			$this->collCommentss = null;
			$this->lastCommentsCriteria = null;

			$this->collMessagess = null;
			$this->lastMessagesCriteria = null;

			$this->singleUserFriendsRelatedByUserId = null;

			$this->collUserFriendssRelatedByFriendId = null;
			$this->lastUserFriendsRelatedByFriendIdCriteria = null;

			$this->collNewss = null;
			$this->lastNewsCriteria = null;

			$this->collAfishas = null;
			$this->lastAfishaCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseUsers:delete:pre') as $callable)
    {
      $ret = call_user_func($callable, $this, $con);
      if ($ret)
      {
        return;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(UsersPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			UsersPeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	

    foreach (sfMixer::getCallables('BaseUsers:delete:post') as $callable)
    {
      call_user_func($callable, $this, $con);
    }

  }
	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseUsers:save:pre') as $callable)
    {
      $affectedRows = call_user_func($callable, $this, $con);
      if (is_int($affectedRows))
      {
        return $affectedRows;
      }
    }


    if ($this->isNew() && !$this->isColumnModified(UsersPeer::CREATED_AT))
    {
      $this->setCreatedAt(time());
    }

    if ($this->isModified() && !$this->isColumnModified(UsersPeer::UPDATED_AT))
    {
      $this->setUpdatedAt(time());
    }

		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(UsersPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$affectedRows = $this->doSave($con);
			$con->commit();
    foreach (sfMixer::getCallables('BaseUsers:save:post') as $callable)
    {
      call_user_func($callable, $this, $con, $affectedRows);
    }

			UsersPeer::addInstanceToPool($this);
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			if ($this->isNew() ) {
				$this->modifiedColumns[] = UsersPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = UsersPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += UsersPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collUsersRememberKeys !== null) {
				foreach ($this->collUsersRememberKeys as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collFilms !== null) {
				foreach ($this->collFilms as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collFilmRaitings !== null) {
				foreach ($this->collFilmRaitings as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collCommentss !== null) {
				foreach ($this->collCommentss as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collMessagess !== null) {
				foreach ($this->collMessagess as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->singleUserFriendsRelatedByUserId !== null) {
				if (!$this->singleUserFriendsRelatedByUserId->isDeleted()) {
						$affectedRows += $this->singleUserFriendsRelatedByUserId->save($con);
				}
			}

			if ($this->collUserFriendssRelatedByFriendId !== null) {
				foreach ($this->collUserFriendssRelatedByFriendId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collNewss !== null) {
				foreach ($this->collNewss as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collAfishas !== null) {
				foreach ($this->collAfishas as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			if (($retval = UsersPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collUsersRememberKeys !== null) {
					foreach ($this->collUsersRememberKeys as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collFilms !== null) {
					foreach ($this->collFilms as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collFilmRaitings !== null) {
					foreach ($this->collFilmRaitings as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collCommentss !== null) {
					foreach ($this->collCommentss as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collMessagess !== null) {
					foreach ($this->collMessagess as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->singleUserFriendsRelatedByUserId !== null) {
					if (!$this->singleUserFriendsRelatedByUserId->validate($columns)) {
						$failureMap = array_merge($failureMap, $this->singleUserFriendsRelatedByUserId->getValidationFailures());
					}
				}

				if ($this->collUserFriendssRelatedByFriendId !== null) {
					foreach ($this->collUserFriendssRelatedByFriendId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collNewss !== null) {
					foreach ($this->collNewss as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collAfishas !== null) {
					foreach ($this->collAfishas as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = UsersPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getLogin();
				break;
			case 2:
				return $this->getPassword();
				break;
			case 3:
				return $this->getEmail();
				break;
			case 4:
				return $this->getWebsiteBlog();
				break;
			case 5:
				return $this->getAvatar();
				break;
			case 6:
				return $this->getAbout();
				break;
			case 7:
				return $this->getRightId();
				break;
			case 8:
				return $this->getLastLogin();
				break;
			case 9:
				return $this->getIsActive();
				break;
			case 10:
				return $this->getIsSuperAdmin();
				break;
			case 11:
				return $this->getCreatedAt();
				break;
			case 12:
				return $this->getUpdatedAt();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = UsersPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getLogin(),
			$keys[2] => $this->getPassword(),
			$keys[3] => $this->getEmail(),
			$keys[4] => $this->getWebsiteBlog(),
			$keys[5] => $this->getAvatar(),
			$keys[6] => $this->getAbout(),
			$keys[7] => $this->getRightId(),
			$keys[8] => $this->getLastLogin(),
			$keys[9] => $this->getIsActive(),
			$keys[10] => $this->getIsSuperAdmin(),
			$keys[11] => $this->getCreatedAt(),
			$keys[12] => $this->getUpdatedAt(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = UsersPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setLogin($value);
				break;
			case 2:
				$this->setPassword($value);
				break;
			case 3:
				$this->setEmail($value);
				break;
			case 4:
				$this->setWebsiteBlog($value);
				break;
			case 5:
				$this->setAvatar($value);
				break;
			case 6:
				$this->setAbout($value);
				break;
			case 7:
				$this->setRightId($value);
				break;
			case 8:
				$this->setLastLogin($value);
				break;
			case 9:
				$this->setIsActive($value);
				break;
			case 10:
				$this->setIsSuperAdmin($value);
				break;
			case 11:
				$this->setCreatedAt($value);
				break;
			case 12:
				$this->setUpdatedAt($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = UsersPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setLogin($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setPassword($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setEmail($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setWebsiteBlog($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setAvatar($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setAbout($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setRightId($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setLastLogin($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setIsActive($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setIsSuperAdmin($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setCreatedAt($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setUpdatedAt($arr[$keys[12]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(UsersPeer::DATABASE_NAME);

		if ($this->isColumnModified(UsersPeer::ID)) $criteria->add(UsersPeer::ID, $this->id);
		if ($this->isColumnModified(UsersPeer::LOGIN)) $criteria->add(UsersPeer::LOGIN, $this->login);
		if ($this->isColumnModified(UsersPeer::PASSWORD)) $criteria->add(UsersPeer::PASSWORD, $this->password);
		if ($this->isColumnModified(UsersPeer::EMAIL)) $criteria->add(UsersPeer::EMAIL, $this->email);
		if ($this->isColumnModified(UsersPeer::WEBSITE_BLOG)) $criteria->add(UsersPeer::WEBSITE_BLOG, $this->website_blog);
		if ($this->isColumnModified(UsersPeer::AVATAR)) $criteria->add(UsersPeer::AVATAR, $this->avatar);
		if ($this->isColumnModified(UsersPeer::ABOUT)) $criteria->add(UsersPeer::ABOUT, $this->about);
		if ($this->isColumnModified(UsersPeer::RIGHT_ID)) $criteria->add(UsersPeer::RIGHT_ID, $this->right_id);
		if ($this->isColumnModified(UsersPeer::LAST_LOGIN)) $criteria->add(UsersPeer::LAST_LOGIN, $this->last_login);
		if ($this->isColumnModified(UsersPeer::IS_ACTIVE)) $criteria->add(UsersPeer::IS_ACTIVE, $this->is_active);
		if ($this->isColumnModified(UsersPeer::IS_SUPER_ADMIN)) $criteria->add(UsersPeer::IS_SUPER_ADMIN, $this->is_super_admin);
		if ($this->isColumnModified(UsersPeer::CREATED_AT)) $criteria->add(UsersPeer::CREATED_AT, $this->created_at);
		if ($this->isColumnModified(UsersPeer::UPDATED_AT)) $criteria->add(UsersPeer::UPDATED_AT, $this->updated_at);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(UsersPeer::DATABASE_NAME);

		$criteria->add(UsersPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Users (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setLogin($this->login);

		$copyObj->setPassword($this->password);

		$copyObj->setEmail($this->email);

		$copyObj->setWebsiteBlog($this->website_blog);

		$copyObj->setAvatar($this->avatar);

		$copyObj->setAbout($this->about);

		$copyObj->setRightId($this->right_id);

		$copyObj->setLastLogin($this->last_login);

		$copyObj->setIsActive($this->is_active);

		$copyObj->setIsSuperAdmin($this->is_super_admin);

		$copyObj->setCreatedAt($this->created_at);

		$copyObj->setUpdatedAt($this->updated_at);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getUsersRememberKeys() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addUsersRememberKey($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getFilms() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addFilm($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getFilmRaitings() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addFilmRaiting($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getCommentss() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addComments($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getMessagess() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addMessages($relObj->copy($deepCopy));
				}
			}

			$relObj = $this->getUserFriendsRelatedByUserId();
			if ($relObj) {
				$copyObj->setUserFriendsRelatedByUserId($relObj->copy($deepCopy));
			}

			foreach ($this->getUserFriendssRelatedByFriendId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addUserFriendsRelatedByFriendId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getNewss() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addNews($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getAfishas() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addAfisha($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Users Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     UsersPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new UsersPeer();
		}
		return self::$peer;
	}

	/**
	 * Clears out the collUsersRememberKeys collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addUsersRememberKeys()
	 */
	public function clearUsersRememberKeys()
	{
		$this->collUsersRememberKeys = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collUsersRememberKeys collection (array).
	 *
	 * By default this just sets the collUsersRememberKeys collection to an empty array (like clearcollUsersRememberKeys());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initUsersRememberKeys()
	{
		$this->collUsersRememberKeys = array();
	}

	/**
	 * Gets an array of UsersRememberKey objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Users has previously been saved, it will retrieve
	 * related UsersRememberKeys from storage. If this Users is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array UsersRememberKey[]
	 * @throws     PropelException
	 */
	public function getUsersRememberKeys($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsersPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collUsersRememberKeys === null) {
			if ($this->isNew()) {
			   $this->collUsersRememberKeys = array();
			} else {

				$criteria->add(UsersRememberKeyPeer::USER_ID, $this->id);

				UsersRememberKeyPeer::addSelectColumns($criteria);
				$this->collUsersRememberKeys = UsersRememberKeyPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(UsersRememberKeyPeer::USER_ID, $this->id);

				UsersRememberKeyPeer::addSelectColumns($criteria);
				if (!isset($this->lastUsersRememberKeyCriteria) || !$this->lastUsersRememberKeyCriteria->equals($criteria)) {
					$this->collUsersRememberKeys = UsersRememberKeyPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastUsersRememberKeyCriteria = $criteria;
		return $this->collUsersRememberKeys;
	}

	/**
	 * Returns the number of related UsersRememberKey objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related UsersRememberKey objects.
	 * @throws     PropelException
	 */
	public function countUsersRememberKeys(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsersPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collUsersRememberKeys === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(UsersRememberKeyPeer::USER_ID, $this->id);

				$count = UsersRememberKeyPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(UsersRememberKeyPeer::USER_ID, $this->id);

				if (!isset($this->lastUsersRememberKeyCriteria) || !$this->lastUsersRememberKeyCriteria->equals($criteria)) {
					$count = UsersRememberKeyPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collUsersRememberKeys);
				}
			} else {
				$count = count($this->collUsersRememberKeys);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a UsersRememberKey object to this object
	 * through the UsersRememberKey foreign key attribute.
	 *
	 * @param      UsersRememberKey $l UsersRememberKey
	 * @return     void
	 * @throws     PropelException
	 */
	public function addUsersRememberKey(UsersRememberKey $l)
	{
		if ($this->collUsersRememberKeys === null) {
			$this->initUsersRememberKeys();
		}
		if (!in_array($l, $this->collUsersRememberKeys, true)) { // only add it if the **same** object is not already associated
			array_push($this->collUsersRememberKeys, $l);
			$l->setUsers($this);
		}
	}

	/**
	 * Clears out the collFilms collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addFilms()
	 */
	public function clearFilms()
	{
		$this->collFilms = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collFilms collection (array).
	 *
	 * By default this just sets the collFilms collection to an empty array (like clearcollFilms());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initFilms()
	{
		$this->collFilms = array();
	}

	/**
	 * Gets an array of Film objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Users has previously been saved, it will retrieve
	 * related Films from storage. If this Users is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Film[]
	 * @throws     PropelException
	 */
	public function getFilms($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsersPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collFilms === null) {
			if ($this->isNew()) {
			   $this->collFilms = array();
			} else {

				$criteria->add(FilmPeer::USER_ID, $this->id);

				FilmPeer::addSelectColumns($criteria);
				$this->collFilms = FilmPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(FilmPeer::USER_ID, $this->id);

				FilmPeer::addSelectColumns($criteria);
				if (!isset($this->lastFilmCriteria) || !$this->lastFilmCriteria->equals($criteria)) {
					$this->collFilms = FilmPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastFilmCriteria = $criteria;
		return $this->collFilms;
	}

	/**
	 * Returns the number of related Film objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Film objects.
	 * @throws     PropelException
	 */
	public function countFilms(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsersPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collFilms === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(FilmPeer::USER_ID, $this->id);

				$count = FilmPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(FilmPeer::USER_ID, $this->id);

				if (!isset($this->lastFilmCriteria) || !$this->lastFilmCriteria->equals($criteria)) {
					$count = FilmPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collFilms);
				}
			} else {
				$count = count($this->collFilms);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Film object to this object
	 * through the Film foreign key attribute.
	 *
	 * @param      Film $l Film
	 * @return     void
	 * @throws     PropelException
	 */
	public function addFilm(Film $l)
	{
		if ($this->collFilms === null) {
			$this->initFilms();
		}
		if (!in_array($l, $this->collFilms, true)) { // only add it if the **same** object is not already associated
			array_push($this->collFilms, $l);
			$l->setUsers($this);
		}
	}

	/**
	 * Clears out the collFilmRaitings collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addFilmRaitings()
	 */
	public function clearFilmRaitings()
	{
		$this->collFilmRaitings = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collFilmRaitings collection (array).
	 *
	 * By default this just sets the collFilmRaitings collection to an empty array (like clearcollFilmRaitings());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initFilmRaitings()
	{
		$this->collFilmRaitings = array();
	}

	/**
	 * Gets an array of FilmRaiting objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Users has previously been saved, it will retrieve
	 * related FilmRaitings from storage. If this Users is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array FilmRaiting[]
	 * @throws     PropelException
	 */
	public function getFilmRaitings($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsersPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collFilmRaitings === null) {
			if ($this->isNew()) {
			   $this->collFilmRaitings = array();
			} else {

				$criteria->add(FilmRaitingPeer::USER_ID, $this->id);

				FilmRaitingPeer::addSelectColumns($criteria);
				$this->collFilmRaitings = FilmRaitingPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(FilmRaitingPeer::USER_ID, $this->id);

				FilmRaitingPeer::addSelectColumns($criteria);
				if (!isset($this->lastFilmRaitingCriteria) || !$this->lastFilmRaitingCriteria->equals($criteria)) {
					$this->collFilmRaitings = FilmRaitingPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastFilmRaitingCriteria = $criteria;
		return $this->collFilmRaitings;
	}

	/**
	 * Returns the number of related FilmRaiting objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related FilmRaiting objects.
	 * @throws     PropelException
	 */
	public function countFilmRaitings(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsersPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collFilmRaitings === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(FilmRaitingPeer::USER_ID, $this->id);

				$count = FilmRaitingPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(FilmRaitingPeer::USER_ID, $this->id);

				if (!isset($this->lastFilmRaitingCriteria) || !$this->lastFilmRaitingCriteria->equals($criteria)) {
					$count = FilmRaitingPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collFilmRaitings);
				}
			} else {
				$count = count($this->collFilmRaitings);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a FilmRaiting object to this object
	 * through the FilmRaiting foreign key attribute.
	 *
	 * @param      FilmRaiting $l FilmRaiting
	 * @return     void
	 * @throws     PropelException
	 */
	public function addFilmRaiting(FilmRaiting $l)
	{
		if ($this->collFilmRaitings === null) {
			$this->initFilmRaitings();
		}
		if (!in_array($l, $this->collFilmRaitings, true)) { // only add it if the **same** object is not already associated
			array_push($this->collFilmRaitings, $l);
			$l->setUsers($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Users is new, it will return
	 * an empty collection; or if this Users has previously
	 * been saved, it will retrieve related FilmRaitings from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Users.
	 */
	public function getFilmRaitingsJoinFilm($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsersPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collFilmRaitings === null) {
			if ($this->isNew()) {
				$this->collFilmRaitings = array();
			} else {

				$criteria->add(FilmRaitingPeer::USER_ID, $this->id);

				$this->collFilmRaitings = FilmRaitingPeer::doSelectJoinFilm($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(FilmRaitingPeer::USER_ID, $this->id);

			if (!isset($this->lastFilmRaitingCriteria) || !$this->lastFilmRaitingCriteria->equals($criteria)) {
				$this->collFilmRaitings = FilmRaitingPeer::doSelectJoinFilm($criteria, $con, $join_behavior);
			}
		}
		$this->lastFilmRaitingCriteria = $criteria;

		return $this->collFilmRaitings;
	}

	/**
	 * Clears out the collCommentss collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addCommentss()
	 */
	public function clearCommentss()
	{
		$this->collCommentss = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collCommentss collection (array).
	 *
	 * By default this just sets the collCommentss collection to an empty array (like clearcollCommentss());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initCommentss()
	{
		$this->collCommentss = array();
	}

	/**
	 * Gets an array of Comments objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Users has previously been saved, it will retrieve
	 * related Commentss from storage. If this Users is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Comments[]
	 * @throws     PropelException
	 */
	public function getCommentss($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsersPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCommentss === null) {
			if ($this->isNew()) {
			   $this->collCommentss = array();
			} else {

				$criteria->add(CommentsPeer::USER_ID, $this->id);

				CommentsPeer::addSelectColumns($criteria);
				$this->collCommentss = CommentsPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(CommentsPeer::USER_ID, $this->id);

				CommentsPeer::addSelectColumns($criteria);
				if (!isset($this->lastCommentsCriteria) || !$this->lastCommentsCriteria->equals($criteria)) {
					$this->collCommentss = CommentsPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastCommentsCriteria = $criteria;
		return $this->collCommentss;
	}

	/**
	 * Returns the number of related Comments objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Comments objects.
	 * @throws     PropelException
	 */
	public function countCommentss(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsersPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collCommentss === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(CommentsPeer::USER_ID, $this->id);

				$count = CommentsPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(CommentsPeer::USER_ID, $this->id);

				if (!isset($this->lastCommentsCriteria) || !$this->lastCommentsCriteria->equals($criteria)) {
					$count = CommentsPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collCommentss);
				}
			} else {
				$count = count($this->collCommentss);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Comments object to this object
	 * through the Comments foreign key attribute.
	 *
	 * @param      Comments $l Comments
	 * @return     void
	 * @throws     PropelException
	 */
	public function addComments(Comments $l)
	{
		if ($this->collCommentss === null) {
			$this->initCommentss();
		}
		if (!in_array($l, $this->collCommentss, true)) { // only add it if the **same** object is not already associated
			array_push($this->collCommentss, $l);
			$l->setUsers($this);
		}
	}

	/**
	 * Clears out the collMessagess collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addMessagess()
	 */
	public function clearMessagess()
	{
		$this->collMessagess = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collMessagess collection (array).
	 *
	 * By default this just sets the collMessagess collection to an empty array (like clearcollMessagess());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initMessagess()
	{
		$this->collMessagess = array();
	}

	/**
	 * Gets an array of Messages objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Users has previously been saved, it will retrieve
	 * related Messagess from storage. If this Users is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Messages[]
	 * @throws     PropelException
	 */
	public function getMessagess($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsersPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMessagess === null) {
			if ($this->isNew()) {
			   $this->collMessagess = array();
			} else {

				$criteria->add(MessagesPeer::USER_ID, $this->id);

				MessagesPeer::addSelectColumns($criteria);
				$this->collMessagess = MessagesPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(MessagesPeer::USER_ID, $this->id);

				MessagesPeer::addSelectColumns($criteria);
				if (!isset($this->lastMessagesCriteria) || !$this->lastMessagesCriteria->equals($criteria)) {
					$this->collMessagess = MessagesPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastMessagesCriteria = $criteria;
		return $this->collMessagess;
	}

	/**
	 * Returns the number of related Messages objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Messages objects.
	 * @throws     PropelException
	 */
	public function countMessagess(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsersPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collMessagess === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(MessagesPeer::USER_ID, $this->id);

				$count = MessagesPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(MessagesPeer::USER_ID, $this->id);

				if (!isset($this->lastMessagesCriteria) || !$this->lastMessagesCriteria->equals($criteria)) {
					$count = MessagesPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collMessagess);
				}
			} else {
				$count = count($this->collMessagess);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Messages object to this object
	 * through the Messages foreign key attribute.
	 *
	 * @param      Messages $l Messages
	 * @return     void
	 * @throws     PropelException
	 */
	public function addMessages(Messages $l)
	{
		if ($this->collMessagess === null) {
			$this->initMessagess();
		}
		if (!in_array($l, $this->collMessagess, true)) { // only add it if the **same** object is not already associated
			array_push($this->collMessagess, $l);
			$l->setUsers($this);
		}
	}

	/**
	 * Gets a single UserFriends object, which is related to this object by a one-to-one relationship.
	 *
	 * @param      PropelPDO $con
	 * @return     UserFriends
	 * @throws     PropelException
	 */
	public function getUserFriendsRelatedByUserId(PropelPDO $con = null)
	{

		if ($this->singleUserFriendsRelatedByUserId === null && !$this->isNew()) {
			$this->singleUserFriendsRelatedByUserId = UserFriendsPeer::retrieveByPK($this->id, $con);
		}

		return $this->singleUserFriendsRelatedByUserId;
	}

	/**
	 * Sets a single UserFriends object as related to this object by a one-to-one relationship.
	 *
	 * @param      UserFriends $l UserFriends
	 * @return     Users The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setUserFriendsRelatedByUserId(UserFriends $v)
	{
		$this->singleUserFriendsRelatedByUserId = $v;

		// Make sure that that the passed-in UserFriends isn't already associated with this object
		if ($v->getUsersRelatedByUserId() === null) {
			$v->setUsersRelatedByUserId($this);
		}

		return $this;
	}

	/**
	 * Clears out the collUserFriendssRelatedByFriendId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addUserFriendssRelatedByFriendId()
	 */
	public function clearUserFriendssRelatedByFriendId()
	{
		$this->collUserFriendssRelatedByFriendId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collUserFriendssRelatedByFriendId collection (array).
	 *
	 * By default this just sets the collUserFriendssRelatedByFriendId collection to an empty array (like clearcollUserFriendssRelatedByFriendId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initUserFriendssRelatedByFriendId()
	{
		$this->collUserFriendssRelatedByFriendId = array();
	}

	/**
	 * Gets an array of UserFriends objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Users has previously been saved, it will retrieve
	 * related UserFriendssRelatedByFriendId from storage. If this Users is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array UserFriends[]
	 * @throws     PropelException
	 */
	public function getUserFriendssRelatedByFriendId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsersPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collUserFriendssRelatedByFriendId === null) {
			if ($this->isNew()) {
			   $this->collUserFriendssRelatedByFriendId = array();
			} else {

				$criteria->add(UserFriendsPeer::FRIEND_ID, $this->id);

				UserFriendsPeer::addSelectColumns($criteria);
				$this->collUserFriendssRelatedByFriendId = UserFriendsPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(UserFriendsPeer::FRIEND_ID, $this->id);

				UserFriendsPeer::addSelectColumns($criteria);
				if (!isset($this->lastUserFriendsRelatedByFriendIdCriteria) || !$this->lastUserFriendsRelatedByFriendIdCriteria->equals($criteria)) {
					$this->collUserFriendssRelatedByFriendId = UserFriendsPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastUserFriendsRelatedByFriendIdCriteria = $criteria;
		return $this->collUserFriendssRelatedByFriendId;
	}

	/**
	 * Returns the number of related UserFriends objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related UserFriends objects.
	 * @throws     PropelException
	 */
	public function countUserFriendssRelatedByFriendId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsersPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collUserFriendssRelatedByFriendId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(UserFriendsPeer::FRIEND_ID, $this->id);

				$count = UserFriendsPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(UserFriendsPeer::FRIEND_ID, $this->id);

				if (!isset($this->lastUserFriendsRelatedByFriendIdCriteria) || !$this->lastUserFriendsRelatedByFriendIdCriteria->equals($criteria)) {
					$count = UserFriendsPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collUserFriendssRelatedByFriendId);
				}
			} else {
				$count = count($this->collUserFriendssRelatedByFriendId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a UserFriends object to this object
	 * through the UserFriends foreign key attribute.
	 *
	 * @param      UserFriends $l UserFriends
	 * @return     void
	 * @throws     PropelException
	 */
	public function addUserFriendsRelatedByFriendId(UserFriends $l)
	{
		if ($this->collUserFriendssRelatedByFriendId === null) {
			$this->initUserFriendssRelatedByFriendId();
		}
		if (!in_array($l, $this->collUserFriendssRelatedByFriendId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collUserFriendssRelatedByFriendId, $l);
			$l->setUsersRelatedByFriendId($this);
		}
	}

	/**
	 * Clears out the collNewss collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addNewss()
	 */
	public function clearNewss()
	{
		$this->collNewss = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collNewss collection (array).
	 *
	 * By default this just sets the collNewss collection to an empty array (like clearcollNewss());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initNewss()
	{
		$this->collNewss = array();
	}

	/**
	 * Gets an array of News objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Users has previously been saved, it will retrieve
	 * related Newss from storage. If this Users is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array News[]
	 * @throws     PropelException
	 */
	public function getNewss($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsersPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collNewss === null) {
			if ($this->isNew()) {
			   $this->collNewss = array();
			} else {

				$criteria->add(NewsPeer::USER_ID, $this->id);

				NewsPeer::addSelectColumns($criteria);
				$this->collNewss = NewsPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(NewsPeer::USER_ID, $this->id);

				NewsPeer::addSelectColumns($criteria);
				if (!isset($this->lastNewsCriteria) || !$this->lastNewsCriteria->equals($criteria)) {
					$this->collNewss = NewsPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastNewsCriteria = $criteria;
		return $this->collNewss;
	}

	/**
	 * Returns the number of related News objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related News objects.
	 * @throws     PropelException
	 */
	public function countNewss(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsersPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collNewss === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(NewsPeer::USER_ID, $this->id);

				$count = NewsPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(NewsPeer::USER_ID, $this->id);

				if (!isset($this->lastNewsCriteria) || !$this->lastNewsCriteria->equals($criteria)) {
					$count = NewsPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collNewss);
				}
			} else {
				$count = count($this->collNewss);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a News object to this object
	 * through the News foreign key attribute.
	 *
	 * @param      News $l News
	 * @return     void
	 * @throws     PropelException
	 */
	public function addNews(News $l)
	{
		if ($this->collNewss === null) {
			$this->initNewss();
		}
		if (!in_array($l, $this->collNewss, true)) { // only add it if the **same** object is not already associated
			array_push($this->collNewss, $l);
			$l->setUsers($this);
		}
	}

	/**
	 * Clears out the collAfishas collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addAfishas()
	 */
	public function clearAfishas()
	{
		$this->collAfishas = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collAfishas collection (array).
	 *
	 * By default this just sets the collAfishas collection to an empty array (like clearcollAfishas());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initAfishas()
	{
		$this->collAfishas = array();
	}

	/**
	 * Gets an array of Afisha objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Users has previously been saved, it will retrieve
	 * related Afishas from storage. If this Users is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Afisha[]
	 * @throws     PropelException
	 */
	public function getAfishas($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsersPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collAfishas === null) {
			if ($this->isNew()) {
			   $this->collAfishas = array();
			} else {

				$criteria->add(AfishaPeer::USER_ID, $this->id);

				AfishaPeer::addSelectColumns($criteria);
				$this->collAfishas = AfishaPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(AfishaPeer::USER_ID, $this->id);

				AfishaPeer::addSelectColumns($criteria);
				if (!isset($this->lastAfishaCriteria) || !$this->lastAfishaCriteria->equals($criteria)) {
					$this->collAfishas = AfishaPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastAfishaCriteria = $criteria;
		return $this->collAfishas;
	}

	/**
	 * Returns the number of related Afisha objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Afisha objects.
	 * @throws     PropelException
	 */
	public function countAfishas(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsersPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collAfishas === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(AfishaPeer::USER_ID, $this->id);

				$count = AfishaPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(AfishaPeer::USER_ID, $this->id);

				if (!isset($this->lastAfishaCriteria) || !$this->lastAfishaCriteria->equals($criteria)) {
					$count = AfishaPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collAfishas);
				}
			} else {
				$count = count($this->collAfishas);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Afisha object to this object
	 * through the Afisha foreign key attribute.
	 *
	 * @param      Afisha $l Afisha
	 * @return     void
	 * @throws     PropelException
	 */
	public function addAfisha(Afisha $l)
	{
		if ($this->collAfishas === null) {
			$this->initAfishas();
		}
		if (!in_array($l, $this->collAfishas, true)) { // only add it if the **same** object is not already associated
			array_push($this->collAfishas, $l);
			$l->setUsers($this);
		}
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collUsersRememberKeys) {
				foreach ((array) $this->collUsersRememberKeys as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collFilms) {
				foreach ((array) $this->collFilms as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collFilmRaitings) {
				foreach ((array) $this->collFilmRaitings as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collCommentss) {
				foreach ((array) $this->collCommentss as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collMessagess) {
				foreach ((array) $this->collMessagess as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->singleUserFriendsRelatedByUserId) {
				$this->singleUserFriendsRelatedByUserId->clearAllReferences($deep);
			}
			if ($this->collUserFriendssRelatedByFriendId) {
				foreach ((array) $this->collUserFriendssRelatedByFriendId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collNewss) {
				foreach ((array) $this->collNewss as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collAfishas) {
				foreach ((array) $this->collAfishas as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collUsersRememberKeys = null;
		$this->collFilms = null;
		$this->collFilmRaitings = null;
		$this->collCommentss = null;
		$this->collMessagess = null;
		$this->singleUserFriendsRelatedByUserId = null;
		$this->collUserFriendssRelatedByFriendId = null;
		$this->collNewss = null;
		$this->collAfishas = null;
	}


  public function __call($method, $arguments)
  {
    if (!$callable = sfMixer::getCallable('BaseUsers:'.$method))
    {
      throw new sfException(sprintf('Call to undefined method BaseUsers::%s', $method));
    }

    array_unshift($arguments, $this);

    return call_user_func_array($callable, $arguments);
  }


} // BaseUsers
